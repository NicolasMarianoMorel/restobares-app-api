#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('src:server');
var http = require('http');
const { User, conn } = require('../db');

// Variables globales
var usersTables = [];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// Syncing all the models at once.
conn.sync({ force: true }).then( async () => {
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
	
	// Creamos un usuario de prueba
	await User.findOrCreate({
		where: {
			email: 'goldentruffle@gmail.com',
			passAdmin: 'abc123',
			passStaff: '321cba',
			tables: 5,
			title: 'La Trufa Dorada',
			logo: 'https://i2.bssl.es/guiamaximin/2020/01/la-chistera-880x587.jpg',
		}
	});
	// Creamos otro usuario de prueba
	await User.findOrCreate({
		where: {
			email: 'betos@gmail.com',
			passAdmin: 'abc123',
			passStaff: '321cba',
			tables: 9,
			title: 'Betos',
			logo: 'https://i2.bssl.es/guiamaximin/2020/01/la-chistera-880x587.jpg',
		}
	});

	// Buscamos la cantidad de mesas de cada usuario
	usersTables = await User.findAll({
		attributes: ['id', 'tables']
	}).then( (data) => data.map(e => e.dataValues));
})
/*.then(data => console.log(usersTables) );*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
}
