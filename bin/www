#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("src:server");
var http = require("http");
const { User, Product, Label, conn } = require("../db.js");
const { usersTables } = require("../cache.js");
const { getCategories, getDiscounts, getLabels, getMenu, generateId } = require("../controllers");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// Syncing all the models at once.
conn.sync({ force: true }).then( async () => {
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
	
	// Creamos un usuario de prueba
	await User.findOrCreate({
		where: {
			id: generateId('goldentruffle@gmail.com'),
			email: 'goldentruffle@gmail.com',
			passAdmin: 'abc123',
			passStaff: '321cba',
			tables: 5,
			title: 'La Trufa Dorada',
			logo: 'https://i2.bssl.es/guiamaximin/2020/01/la-chistera-880x587.jpg',
		}
	});
	// Creamos otro usuario de prueba
	await User.findOrCreate({
		where: {
			id: generateId('betos@gmail.com'),
			email: 'betos@gmail.com',
			passAdmin: 'abc123',
			passStaff: '321cba',
			tables: 9,
			title: 'Betos',
			logo: 'https://i2.bssl.es/guiamaximin/2020/01/la-chistera-880x587.jpg',
		}
	});

	// Buscamos la cantidad de mesas de cada usuario
	await User.findAll({
		attributes: ['id', 'tables']
	})
		.then( (users) => users.map(({dataValues}) => {
			let tables = [];
			for (let i=0; i < dataValues.tables; i++) {
				tables.push(
					{
						tableId: i+1,
						state: 'free', // free, eating, waiting, pay_cash, pay_online
						calling: false,
						ordered: [], // already ordered products
						totalPrice: 0,
						tip: 0,
						currentOrder: { // order waiting to be served
							time: '',
							products: [],
							comments: '',
						}
					}
				);
			}
			usersTables[dataValues.id] = { tables };
		}))
		//agregamos categorias, descuentos y etiquetas
		await getCategories();
		await getDiscounts();
		await getLabels();

		//Creamos Menus de prueba
		let arrayMenus= [
			{
			  product_id: 1,
			  product_name: "Hamburguesa",
			  details: "Hola soy la descripción de tu platillo.",
			  price: 10.00,
			  img: "https://milrecetas.net/wp-content/uploads/2018/01/Hamburguesa-casera-con-tocineta-2.jpg",
			  discount_id: 1,
			  category_id: 2,
			  labels: [2, 11, 9]
			},
			{
			  product_id: 2,
			  product_name: "Milanesa de pollo",
			  details: "Hola soy la descripción de tu platillo.",
			  price: 15.00,
			  img: "https://saboryestilo.com.mx/wp-content/uploads/2019/09/recetas-superama-milanesa-de-pollo-600x300.jpg",
			  discount_id: 2,
			  category_id: 2,
			  labels: [10, 12, 2]
			},
			{
			  product_id: 3,
			  product_name: "Tacos",
			  details: "Hola soy la descripción de tu platillo.",
			  price: 9.00,
			  img: "https://i0.wp.com/www.cuboinformativo.top/wp-content/uploads/2020/10/comida-tipica-de-cancun.jpg?resize=600%2C300&ssl=1",
			  discount_id: 1,
			  category_id: 1,
			  labels: [11, 12],
			},
			{
			  product_id: 4,
			  product_name: "Pizza",
			  details: "Hola soy la descripción de tu platillo.",
			  price: 14.00,
			  img: "https://s3.amazonaws.com/cdn.conectate-new.com/wp-content/uploads/2021/03/02201833/Pizza-Hut-Republica-Dominicana.jpg",
			  discount_id: 2,
			  category_id: 2,
			  labels: [5, 6],
			},
		  {
			  product_id: 5,
			  product_name: "Empanadas",
			  details: "Hola soy la descripción de tu platillo.",
			  price: 20.00,
			  img: "https://informaciongastronomica.com/wp-content/uploads/2019/01/empanada2.jpg",
			  discount_id: 3,
			  category_id: 1,
			  labels: [8, 11],
			},
			{
			  product_id: 6,
			  product_name: "Bandeja paisa",
			  details: "Hola soy la descripción de tu platillo.",
			  price: 18.00,
			  img: "https://img1.wsimg.com/isteam/ip/9d354e1d-14a1-4160-9592-069c2b7e3474/Bandeja-Paisa.jpg/:/cr=t:12.5%25,l:0%25,w:100%25,h:75%25/rs=w:600,h:300,cg:true",
			  discount_id: 1,
			  category_id: 3,
			  labels: [2, 10, 11],
			},
			{
				product_id: 7,
				product_name: "Fernet papá",
				details: "Hola soy la descripción de tu platillo.",
				price: 10.00,
				img: "https://pbs.twimg.com/media/B4iFFySIEAA8sf5.jpg",
				discount_id: 2,
				category_id: 4,
				labels: [3],
			  }
		  ];
 var LaTrufaDorada = await User.findOne({
	 where: {
		 title: "La Trufa Dorada"
	 }
 })
let menu = await getMenu(LaTrufaDorada.id)
//  console.log(menu)
if (!menu.length) {

	for (let i = 0; i < arrayMenus.length; i++) {
		try {
			var newProduct = await Product.create({
					name: arrayMenus[i].product_name,
					price: arrayMenus[i].price,
					detail: arrayMenus[i].details,
					image: arrayMenus[i].img,
					DiscountId: arrayMenus[i].discount_id,
					CategoryId: arrayMenus[i].category_id,
					UserId: LaTrufaDorada.id,
					available: true
				}
			)
			const db_labels= await Label.findAll({
				where: {id: arrayMenus[i].labels}
			});
			
			await newProduct.addLabels(db_labels);
		}
		catch(err) {
			throw new Error(err)
		}
	}
}
// console.log(await getMenu(LaTrufaDorada.id))
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
}
